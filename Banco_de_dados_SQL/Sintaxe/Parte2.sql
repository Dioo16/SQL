CREATE DATABASE PROJETO2;

USE PROJETO2;

SELECT NOME, SEXO, EMAIL, CPF, TELEFONE,ENDERECO 
FROM CLIENTE
WHERE EMAIL IS NULL -- PARA MOSTRAR QUAIS NA TABELA TEM EMAIL NULO
-- OU INEXISTENTES


SELECT NOME, SEXO, EMAIL, CPF, TELEFONE,ENDERECO 
FROM CLIENTE
WHERE EMAIL IS NOT NULL; -- PARA MOSTRAR QUAIS NA TABELA TEM EMAIL EXISTENTE


-- UPDATE ADCIONANDO NAS TABELAS
SELECT NOME, EMAIL
FROM CLIENTE;

UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM';

SELECT NOME, SEXO, EMAIL, CPF, TELEFONE,ENDERECO 
FROM CLIENTE
WHERE NOME = 'JOAO';

UPDATE CLIENTE
SET EMAIL = 'JORGE@CUZAO.COM.BR'
WHERE NOME = 'JORGE';

-- DELETANDO

DELETE FROM CLIENTE
WHERE NOME = 'ANA'

SELECT * FROM CLIENTE WHERE NOME = 'ANA';

SELECT COUNT(*) FROM CLIENTE;

INSERT INTO CLIENTE(NOME,SEXO,EMAIL,CPF,TELEFONE,ENDERECO)
VALUES('CARLA','F', 'OTARIO@GMAIL.COM', '71828121', '891781311', 'RUA FERNADINHO LOPES 123 - TIJUCA RJ');

DELETE FROM CLIENTE
WHERE NOME = 'CARLA'
AND
EMAIL = 'LILIAN@HOTMAIL.COM';

SELECT * FROM CLIENTE ---usar sempre o select para ver se realmente está correto!.
WHERE NOME = 'CARLA'
AND
EMAIL = 'LILIAN@HOTMAIL.COM';


---Modelagem
-- Primeira forma normal
	
	1 --Todo campo vetorizado se torna uma tabela
		--Isto é, campos que tem mais de uma identificação, como se fosse uma lista, exemplo: Ka, fiesta, civic > carros
																						   -- Amarelo, azul, > Cores
																						   -- 91132-2932, 2919-9320 > telefones
	
	2--Todo campo multivalorado se torna outra tabela(quando o campor for divisível)
		--ex:(Oscar cury - bom retiro - patos de minas - mg), da pra ser dividido por
			--bairro, cidade, estado.....
	
	3-- toda tabela necessita de pelo menos um campo que identifique todo o registro como sendo unico
		-- Que é chamado de chave primária ou primary key. OU SEJA, toda tabela precisa de uma primary key
			-- há dois tipos de chave, natural e artificial.
				--natural -cpf, rg(coisas unicas de cada pessoa)
				-- artificial - ID e etc..

--	obrigatoriedade 0 = não é obrigatório, 1 = obrigatório	
-- Cardinalidade 1 = pelo menos um, N= Mais de  um

CREATE DATABASE COMERCIO;
USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL, 						                	 
	EMAIL VARCHAR(50) UNIQUE,
	MSG VARCHAR(500) NOT NULL              			
);

ALTER TABLE CLIENTE MODIFY SEXO ENUM('M', 'F') NOT NULL; --ALTERAR ALGUM DADO NA TABELA
ALTER TABLE CLIENTE ADD CPF VARCHAR(50)NOT NULL; --ADCIONAR ALGUM DADO NA TABELA
DROP TABLE CLIENTE; --EXCLUIR A TABELA

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30)NOT NULL,
	BAIRRO VARCHAR(50)NOT NULL,
	CIDADE VARCHAR(20)NOT NULL,
	ESTADO CHAR(2)NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE) 
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ('RES','CEL','COM')NOT NULL,
	NUMERO VARCHAR(20)NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

--Endereço-obrigatório,somente um
-- telefone-não obrigatório, vários


/*
CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UMA TABELA
QUE VAI ATÉ A OUTRA TABELA PARA FAZER REFERENCIA ENTRE
REGISTROS */

/* EM RELACIONAMENTO 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA */

/* EM RELACIONAMENTO 1 X N A CHAVE ESTRANGEIRA FICARA SEMPRE NA
CARDINALIDADE N */

SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJECAO */ 
FROM CLIENTE /* ORIGEM */
	INNER JOIN ENDERECO /*JUNCAO */
	ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; /* SELECAO */

/* NOME, SEXO, EMAIL, TIPO, NUMERO */

SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE 
INNER JOIN TELEFONE
ON IDCLIENTE = ID_CLIENTE;

/* NOME, SEXO, BAIRRO, CIDADE, TIPO, NUMERO */

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE 
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;


SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE;




	DML - DATA MANIPULATION LANGUAGE
	DDL - DATA DEFINITION LANGUAGE
	DCL - DATA CONTROL LANGUAGE
	TCL - TRANSACTION CONTROL LANGUAGE

*/
--------------------------------------------DML--------------------------------------------------------
/* INSERT */

INSERT INTO CLIENTE VALUES(NULL,'PAULA','M',NULL,'77437493');
INSERT INTO ENDERECO VALUES(NULL,'RUA JOAQUIM SILVA','ALVORADA','NITEROI','RJ',7);

SELECT * FROM CLIENTE;

/* FILTROS */

SELECT * FROM CLIENTE
WHERE SEXO = 'M';

/* UPDATE */

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 7;

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 7;

/* DELETE */ 

INSERT INTO CLIENTE VALUES(NULL,'XXX','M',NULL,'XXX');

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 8;

DELETE FROM CLIENTE WHERE IDCLIENTE = 8;


/* 
  DDL - DATA DEFINITION LANGUAGE
*/

CREATE TABLE PRODUTO(
	IDPROTUDO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(40) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);


--ALTER TABLE

ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO INT NOT NULL;



--MODIFY

ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL;


--ADCIONANDO TABELA

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

--APAGANDO COLUNAS

ALTER TABLE PRODUTO
DROP COLUMN PESO;

--ADCIONANDO A COLUNA EM ORDEM ESPECÍFICA!

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
AFTER NOME_PRODUTO;

ALTER TABLE PRODUTO 
ADD COLUMN PESO FLOAT(10,2) NOT NULL
FIRST;
--EXERCICIO RELATÓRIO CLIENTES
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF,E.ESTADO, E.CIDADE, E.BAIRRO, E.RUA, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.ID_CLIENTE

-- RELATÓRIO HOMENS
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF,E.ESTADO, E.CIDADE, E.BAIRRO, E.RUA, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';


--12,13,18,19

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE IN (6,12,13,18,19);

--RELATÓRIO MULHERES
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF,
		E.ESTADO, E.CIDADE, E.BAIRRO, E.RUA, 
		T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
	ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
	ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F';


-- QUANTIDADE DE HOMENS E MULHERES

SELECT SEXO, COUNT(*)
FROM CLIENT
GROUP BY SEXO;

/* IDS E EMAIL DAS MULHERES QUE MOREM NO CENTRO DO RIO DE JANEIRO E 
NAO TENHAM CELULAR */
SELECT C.IDCLIENTE, C.EMAIL, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.ID_CLIENTE
WHERE CIDADE = 'RIO DE JANEIRO'
AND
BAIRRO = 'CENTRO'
AND SEXO = 'F'
AND (TIPO = 'RES' OR 'COM')

-----------------------------
update CLIENTE
	SET SEXO ='M'
	WHERE IDCLIENTE = 16

	--------------


	/* PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */




SELECT C.NOME, C.EMAIL, T.NUMERO, E.ESTADO, T.TIPO
from CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE= T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE ESTADO = 'RJ'
AND TIPO = 'CEL';


/* PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
 DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */


SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR, E.ESTADO, T.TIPO 
from CLIENTE C -- origem---
INNER JOIN TELEFONE T
ON C.IDCLIENTE= T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE ESTADO = 'SP'
AND SEXO = 'F'
AND TIPO = 'CEL';


---if null----

SELECT  C.NOME, 
		IFNULL(C.EMAIL,'NÃO TEM EMAIL') AS 'EMAIL',
 		C.SEXO,
  		E.ESTADO, 
  		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.ID_CLIENTE;


-----VIEW----

SELECT C.NOME, 
	C.EMAIL,
    C.SEXO,
    T.TIPO,
    T.NUMERO, 
    E.BAIRRO,
    E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

CREATE VIEW RELATORIO AS
SELECT C.NOME, 
	C.EMAIL,
    C.SEXO,
    T.TIPO,
    T.NUMERO, 
    E.BAIRRO,
    E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

-- VIEW É COMO CRIAR UMA CERTA LOCALIZAÇÃO COM UMA CERTA PROGRAMAÇÃO, EXEMPLO UMA VIEW COM MULHERES, HOMENS E ETC...

--APAGANDO VIEW

DROP VIEW RELATORIO;

--SEMPRE BOM COLOCAR O PREFIXO ''V'' PRA SABER QUE É UMA VIEW EX:

CREATE VIEW V_RELATORIO AS
SELECT C.NOME, 
	IFNULL(C.EMAIL,'EMAIL INEXISTENTE') AS 'EMAIL',
    C.SEXO,
    T.TIPO,
    T.NUMERO, 
    E.BAIRRO,
    E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;


SELECT NOME, ESTADO, NUMERO
FROM V_RELATORIO;

/* UPDATE, INSERT E DELETE - DML */

INSERT INTO V_RELATORIO VALUES(
'ANDREIA','F','ANDREIA@UOL.COM.BR','CEL','873547864','CENTRO','VITORIA','ES'
); --ERRO, POIS TEM JOIN.

CREATE TABLE JOGADORES(
	IDJOGADOR INT,
	NOME VARCHAR(30),
	ESTADO CHAR(2)
);

INSERT INTO JOGADORES VALUES(1,'GUERRERO','RS');
INSERT INTO JOGADORES VALUES(2,'GABIGOL','RJ');
INSERT INTO JOGADORES VALUES(3,'GANSO','RJ');
INSERT INTO JOGADORES VALUES(4,'NENÊ', 'RJ');
INSERT INTO JOGADORES VALUES(5,'LOVE','SP');

CREATE VIEW V_JOGADORES AS
SELECT NOME, ESTADO
FROM JOGADORES;

DELETE FROM V_RELATORIO
WHERE NOME = 'JORGE';
--ERRO, POIS TEM JOIN.

UPDATE V_RELATORIO
SET NOME = 'George'
WHERE NOME = 'Jorge'
--UPDATES FUNCIONAM NOS VIEWS COM JOIN
DELETE FROM V_JOGADORES
WHERE NOME = 'GUERRERO';
--SEM JOIN, É PERMITIDO QUALQUER OPERAÇÃO DA DML

INSERT INTO V_JOGADORES 
VALUES('GUERRERO','RS');
--SEM JOIN, É PERMITIDO QUALQUER OPERAÇÃO DA DML

SELECT * FROM V_RELATORIO
WHERE SEXO = 'F';


--ORDER BY---

CREATE TABLE ALUNO(
	NUMERO INT,
	NOME VARCHAR(30)

);

INSERT INTO ALUNO VALUES(1,'JOAO');
INSERT INTO ALUNO VALUES(1,'MARIA');
INSERT INTO ALUNO VALUES(2,'ZOE');
INSERT INTO ALUNO VALUES(2,'ANDRE');
INSERT INTO ALUNO VALUES(3,'CLARA');
INSERT INTO ALUNO VALUES(1,'CLARA');
INSERT INTO ALUNO VALUES(4,'MAFRA');
INSERT INTO ALUNO VALUES(5,'JANAINA');
INSERT INTO ALUNO VALUES(1,'JANAINA');
INSERT INTO ALUNO VALUES(3,'MARCELO');
INSERT INTO ALUNO VALUES(4,'GIOVANI');
INSERT INTO ALUNO VALUES(5,'ANTONIO');
INSERT INTO ALUNO VALUES(6,'ANA');
INSERT INTO ALUNO VALUES(6,'VIVIANE');

SELECT * FROM ALUNO
ORDER BY NUMERO;


-- PELO NOME OU PELO NUMERO DA ORDEM DA COLUNA

SELECT * FROM ALUNO
ORDER BY 2;

--- ORDENANDO POR MAIS DE UMA COLUNA
SELECT * FROM ALUNO
ORDER BY 2,1;

SELECT * FROM ALUNO
ORDER BY 1,2;


--ORDER BY COM PROJEÇÃO

SELECT NOME FROM ALUNO
ORDER BY NUMERO, NOME;


-- ORDER BY DESC / ASC

SELECT * FROM ALUNO
ORDER BY NUMERO ASC;

SELECT * FROM ALUNO
ORDER BY NUMERO DESC;

SELECT * FROM ALUNO
ORDER BY 1 DESC, 2 DESC;

---COM JOINS
SELECT C.NOME, 
	C.EMAIL,
    C.SEXO,
    T.TIPO,
    T.NUMERO, 
    E.BAIRRO,
    E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
ORDER BY 1;


--delimitador

DELIMITER [


--- stored procedures


delimiter $

CREATE PROCEDURE NOME()
BEGIN

	QUALQUER PROCESSO;

END
$

CREATE PROCEDURE NOME()
BEGIN

	SELECT 'UNIVERSIDADE DE DADOS' AS EMPRESA;

	END
	$

-- CHAMANDO UMA PROCEDURE

CALL NOME()$

-- APAGANDO PROCEDURE

DROP PROCEDURE NOME$


---USANDO PROCEDURE


CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN


	SELECT NUMERO1 + NUMERO2 AS CONTA;


	END
	$


	create table cursos(
		IDCURSOS INT PRIMARY KEY AUTO_INCREMENT,
		NOME VARCHAR(30) NOT NULL,
		HORAS INT(3) NOT NULL,
		VALOR FLOAT(10,2) NOT NULL
		E
	);

	INSERT INTO CURSOS VALUES(NULL,'JAVA',30,500.00);
	INSERT INTO CURSOS VALUES(NULL,'FUNDAMENTOS DE BANCOS DE DADOS',40,700.00)

	SELECT IDCURSOS, NOME, HORAS, VALOR FROM CURSOS;

	DELIMITER ´

	CREATE PROCEDURE CAD_CURSOS(P_NOME VARCHAR(30), 
								P_HORAS INT(3), 
								P_VALOR FLOAT(10,2))
	BEGIN
			INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_VALOR);

	END
	.

DELIMITER ;

CALL CAD_CURSOS('SQL SERVER', 30, 100.00);
CALL CAD_CURSOS('DEPP', 20, 150.00);
CALL CAD_CURSOS('PYZZ', 10, 300.00);

CREATE TABLE VENDEDOR(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARÇO FLOAT(10,2)
);

INSERT INTO VENDEDOR VALUES(NULL,'CARLOS','M',76234.78,88346.87,5756.90);
INSERT INTO VENDEDOR VALUES(NULL,'MARIA','F',5865.78,6768.87,4467.90);
INSERT INTO VENDEDOR VALUES(NULL,'ANTONIO','M',78769.78,6685.87,6664.90);
INSERT INTO VENDEDOR VALUES(NULL,'CLARA','F',5779.78,446886.87,8965.90);
INSERT INTO VENDEDOR VALUES(NULL,'ANDERSON','M',676545.78,77544.87,578665.90);
INSERT INTO VENDEDOR VALUES(NULL,'IVONE','F',57789.78,44774.87,68665.90);
INSERT INTO VENDEDOR VALUES(NULL,'JOAO','M',4785.78,66478.87,6887.90);
INSERT INTO VENDEDOR VALUES(NULL,'CELIA','F',89667.78,57654.87,5755.90);




--MAX- TRAZ O VALOR MÁXIMO DE UMA COLUNA

SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDOR;
--- MINIMO---

SELECT MIN(FEVEREIRO) AS MENOR_FEV
FROM VENDEDOR;

--MÉDIA----

SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDOR;


SELECT MAX(JANEIRO) AS MAIORJAN,
	   MIN(JANEIRO) AS MENORJAN,
	   TRUNCATE(AVG(JANEIRO), 2) AS MEDIAJAN
FROM VENDEDOR;

SELECT SUM(JANEIRO) AS SOMA_JAN,
 		SUM(FEVEREIRO) AS SOMA_FEV,
 		SUM(MARÇO) AS SOMA_MAR
FROM VENDEDOR;

--- VENDAS POR SEXO

SELECT SEXO, SUM(MARÇO) AS TOTAL_MARÇO
FROM VENDEDOR
GROUP BY SEXO;

--SUBQUERIES

SELECT NOME, MARÇO
FROM VENDEDOR
WHERE MARÇO = (SELECT MIN(MARÇO) FROM VENDEDOR);

SELECT NOME, MARÇO
FROM VENDEDOR
WHERE MARÇO = (SELECT MAX(MARÇO) FROM VENDEDOR);

SELECT NOME, MARÇO
FROM VENDEDOR
WHERE MARÇO > (SELECT AVG(MARÇO) FROM VENDEDOR);

--SOMANDO POR LINHAS

SELECT NOME, 
	   JANEIRO, 
	   FEVEREIRO, 
	   MARÇO,
	 TRUNCATE((JANEIRO+FEVEREIRO+MARÇO)/3,2) AS MEDIA_MESES,
	 TRUNCATE((JANEIRO+FEVEREIRO+MARÇO),3) AS TOTAL_MESES 
FROM VENDEDOR;

--APLICANDO PORCENTAGEM

SELECT NOME, 
	   JANEIRO, 
	   FEVEREIRO, 
	   MARÇO,
	 TRUNCATE((JANEIRO+FEVEREIRO+MARÇO),3) * .25 AS DESCONTO_MESES, 
	 TRUNCATE((JANEIRO+FEVEREIRO+MARÇO)/3,2) AS MEDIA_MESES,
	 TRUNCATE((JANEIRO+FEVEREIRO+MARÇO),3) AS TOTAL_MESES 
FROM VENDEDOR;

CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

ALTER TABLE TABELA
ADD PRIMARY KEY(COLUNA1);

--ADICIONANDO UMA PK
ALTER TABLE TABELA 
ADD PRIMARY KEY (COLUNA1);

--ADICIONANDO COLUNA SEM POSICAO. ULTIMA POSICAO
ALTER TABLE TABELA 
ADD COLUNA varchar(30);

ALTER TABLE TABELA 
ADD COLUNA100 INT;

--ADICIONANDO UMA COLUNA COM POSICAO
ALTER TABLE TABELA 
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

--MODIFICANDO O TIPO DE UM CAMPO
ALTER TABLE TABELA
 MODIFY COLUNA2 DATE NOT NULL;

--RENOMEANDO O NOME DA TABELA
ALTER TABLE TABELA 
RENAME PESSOA;

ALTER TABLE PESSOA
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA (COLUNA1)

ALTER TABLE PESSOA
ADD PRIMARY KEY (COLUNA1);

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

/* VERIFICAR AS CHAVES */
SHOW CREATE TABLE TIME;

/* A34 - ORGANIZACAO DE CHAVES - CONSTRAINT (REGRA) */

CREATE TABLE JOGADOR ( 
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)
);

CREATE TABLE TIMES(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY(ID_JOGADOR)
	REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL,'GUERRERO');
INSERT INTO TIMES VALUES(NULL,'FLAMENGO',1);




SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;

/* A35 - ORGANIZANDO CHAVES
 */


DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY (IDCLIENTE);


ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

-- DICIONÁRIO DE DADOS
STATUS
SHOW DATABASES;


USE INFORMATION_SCHEMA;]

SELECT CONSTRAINT_SCHEMA AS 'BANCO';
SELECT CONSTRAINT_SCHEMA AS "BANCO",
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_NAME AS "NOME REGRA",
	   CONSTRAINT_TYPE AS "TIPO"
	   FROM TABLE_CONSTRAINTS
	   WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

-- APAGANDO CONSTRAINTS

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;


--Exercicio José

CREATE DATABASE PROJETOE;
USE PROJETOE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	ID_CARRO INT UNIQUE,
	NOME VARCHAR(30) NOT NULL,
	SEXO VARCHAR(1) NOT NULL
);

CREATE TABLE CARROS(
	ID_CLIENTECAR INT PRIMARY KEY AUTO_INCREMENT,
	ID_MARCA INT,
	CHASSI VARCHAR(20),
	MODELO VARCHAR(20)
);

CREATE TABLE CORES(
	ID_CLIENTECOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(20) NOT NULL UNIQUE

);

CREATE TABLE TELEFONE(
	ID_ClIENTETEL INT PRIMARY KEY AUTO_INCREMENT,
	ID_CLIENTE INT,
	NUMERO INT,
	TIPO VARCHAR(5)
);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(20) UNIQUE
);

CREATE TABLE CARROCOR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY (ID_CARRO, ID_COR)
);



ALTER TABLE TELEFONE 
ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY (ID_ClIENTETEL)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE 
ADD CONSTRAINT FK_CARROS
FOREIGN KEY (ID_CLIENTECAR) 
REFERENCES CARROS(ID_CLIENTECAR);

ALTER TABLE CARROS 
ADD CONSTRAINT FK_MCARROS
FOREIGN KEY (ID_MARCA) 
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARROCOR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARROS(ID_CLIENTECAR);

ALTER TABLE CARROCOR
ADD CONSTRAINT FK_COR
FOREIGN KEY (ID_COR)
REFERENCES CORES(ID_CLIENTECOR);


1 --Todo campo vetorizado se torna uma tabela
		--Isto é, campos que tem mais de uma identificação, como se fosse uma lista, exemplo: Ka, fiesta, civic > Marcas
																						   -- Amarelo, azul, > Cores
																						   -- 91132-2932, 2919-9320 > telefones
	
	2--Todo campo multivalorado se torna outra tabela(quando o campor for divisível)
		--ex:(Oscar cury - bom retiro - patos de minas - mg), da pra ser dividido por
			--bairro, cidade, estado.....
	
	3-- toda tabela necessita de pelo menos um campo que identifique todo o registro como sendo unico
		-- Que é chamado de chave primária ou primary key. OU SEJA, toda tabela precisa de uma  key
			-- há dois tipos de chave, natural e artificial.
				--natural -cpf, rg(coisas unicas de cada pessoa)
				-- artificial - ID e etc..

-- TRIGGER---------


/* ESTRUTURA DE UMA TRIGGER */

CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO

		QUALQUER COMANDO SQL

END -> FIM

CREATE DATABASE TRIG;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

---CRIANDO A TRIGGER----

DELIMITER $
CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN 
	INSERT INTO BKP_USUARIO VALUES
	(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);


END 
$

INSERT INTO USUARIO VALUES(NULL,'ANDRADE','ANDRADE2009','HEXACAMPEAO');

DELETE FROM USUARIO WHERE NOME = 'ANDRADE';

DELETE FROM USUARIO WHERE IDUSUARIO = 1;


CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA;

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0); --inserir em outro banco sem estar conectado

SELECT * FROM BACKUP.BKP_PRODUTO;


DELIMITER $
CREATE TRIGGER BKPP_PRODUTO
BEFORE INSERT ON PRODUTO 
FOR EACH ROW
BEGIN 
	
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);

END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

DELETE FROM PRODUTO
WHERE
IDPRODUTO = 2;

DROP TRIGGER BKPP_PRODUTO;




INSERT INTO PRODUTO VALUES(NULL,'C#',100.00);

SELECT * FROM PRODUTO

SELECT * FROM BACKUP.BKP_PRODUTO


ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP.BKP_PRODUTO;


SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');

END
$
DELIMITER;

DELETE FROM PRODUTO
WHERE IDPRODUTO = 4;


-- TRIGGER DE AUDITORIA---

SELECT NOW(); -- QUANDO

SELECT CURRENT_USER(); -- QUEM

CREATE TABLE PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
);

USE LOJA;


DELIMITER #
CREATE TRIGGER AUD_PRODUT
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR, NEW.VALOR,NOW(),CURRENT_USER(),'U');

END
#

DELIMITER ;

USE LOJA;

UPDATE PRODUTO
SET VALOR = 100.00
WHERE IDPRODUTO = 4;

SELECT * FROM AUD_PRODUT;


--AUTO RELACIONAMENTO---

CREATE DATABASE CURSO_AUTO;

CREATE TABLE CURSOS(
	IDCURSOS INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2),
	HORAS INT,
	IDPREREQ INT


);

ALTER TABLE CURSOS
ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(IDPREREQ)
REFERENCES CURSOS(IDCURSOS);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);

SELECT IDCURSOS, NOME, VALOR, HORAS,IFNULL(IDPREREQ,"SEM PRÉ-REQUISITOS")AS 'ID DO REQUISITO' FROM CURSOS;
SELECT * FROM CURSOS;

-- EXERC 
--/* NOME, VALOR, HORAS E O NOME DO PRE REQUISITO DO CURSO


SELECT 
C.NOME AS CURSO, 
C.VALOR AS VALOR, 
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSOS = C.IDPREREQ;

---CURSORES---

CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT

);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',54786,76889,7098);

SELECT * FROM VENDEDORES;

SELECT NOME, (JAN + FEV + MAR) AS TOTAL, FROM VENDEDORES;

SELECT NOME, (JAN + FEV + MAR) AS TOTAL, (JAN + FEV + MAR)/3 AS MEDIA FROM VENDEDORES;


CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);



DELIMITER $


CREATE PROCEDURE INSEREDADOS()
BEGIN
		DECLARE FIM INT DEFAULT 0;
		DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
		DECLARE VNOME VARCHAR(50);
		
		DECLARE REG CURSOR FOR(
			SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
		);
		
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
		
		OPEN REG;
		
		REPEAT
		
			FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
			IF NOT FIM THEN
			
				SET VTOTAL = VAR1 + VAR2 + VAR3;
				SET VMEDIA = VTOTAL / 3;
				
				INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
				
			END IF;
			
		UNTIL FIM END REPEAT;
		
		CLOSE REG;
END
$


SELECT * FROM VENDEDORES;
SELECT * FROM VEND_TOTAL;

CALL INSEREDADOS();

SELECT * FROM VEND_TOTAL;



-- SEGUNDA E TERCEIRA FORMA NORMAL
 --PRIMEIRA FN
	 
	-- ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
	-- UM CAMPO NAO PODE SER VETORIZADO
	-- PK CHAVE PRIMARIA


CREATE DATABASE CONSULTORIO;
USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

 CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);


CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);


CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE	
);  

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY (ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNAÇÃO_HOSPITAL
FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);


------------------BI-------------
